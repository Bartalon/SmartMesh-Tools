//////////////////////////////////////
/////       SmartMesh Tools       ////
/////         Version 1.0         ////
//////////////////////////////////////
   //                          //
//////////////////////////////////////
////  Authored and Maintained by  ////
////                              ////
////  Dennis "Bartalon" Porter    ////
////                              ////
////  Dennis.Porter.3D@gmail.com  ////
////    www.DennisPorter3D.com    ////
//////////////////////////////////////
 /*

Installation Instructions:
1) Fully exit Maya.
2) Paste dpSmartMeshTools.mel into C:\Users\Owner\Documents\maya\2013-x64\scripts
    or equivalent scripts folder destination. Be sure to put it into the Scripts folder 
    located inside the 2013 folder (not the one inside the "maya" folder) or it won't install 
    properly.
3) Open Maya.
4) In Maya's MEL command line (or in the Script Editor), type in the following, then press enter:

source dpSmartMeshTools.mel; dpSmartMeshTools;


For updates check http://www.creativecrash.com/maya/script/smartmesh-tools
or www.DennisPorter3D.com/mel.htm

*/

global string $stRelease = "27 January 2015";
global string $stVersion = "1.1.0";


/////////////////////////////////
//  User-Adjustable Variables  //
/////////////////////////////////

//  If you do not want custom naming conventions, set these values to 0 for each operation you
//  do not want to automatically rename meshes.
//  (Save and re-source script or re-open SmartMesh Tools window. Restarting Maya not required)
//
//  ONLY USE VALUES  0  or  1
//  0 disables a feature
//  1 enables a feature
//  Be careful not to delete the semicolons (there should be one at
//  the end of each line in ths section

global int $st_CustomNames_Combine = 1;
global int $st_CustomNames_Separate = 1;
global int $st_CustomNames_Extract = 1;
global int $st_CustomNames_DupeFace = 1;

//////////////////////////////
//  SmartMesh Tools Window  //
//////////////////////////////

global proc dpSmartMeshTools() {
	global string $stVersion;
	string $buttonLabel[] = {
		"Smart Combine",
		"Smart Separate",
		"Smart Extract",
		"Smart Duplicate Face" };
	string $buttonImage[] = {
		"polyUnite.png",
		"polySeparate.png",
		"polyChipOff.png",
		"polyDuplicateFacet.png" };

    if (`window -ex stAboutWindow`) { deleteUI stAboutWindow; windowPref -remove stAboutWindow; }
    if (`window -ex stBindHotkey`) { deleteUI stBindHotkey; windowPref -remove stBindHotkey; }
	if (`window -ex smartMeshToolsWindow`) { deleteUI smartMeshToolsWindow; }

    window -mxb 0 -mnb 0 -tlb 1 -title ("SmartMesh Tools v" + $stVersion) -w 200 smartMeshToolsWindow;
        gridLayout -cellWidthHeight 225 32 -numberOfColumns 1;
            for ($i=0; $i<4; ++$i) {
				string $buttonCommand = "";
            	if ($i == 0) { $buttonCommand = "dpSmartCombine();"; }
            	if ($i == 1) { $buttonCommand = "dpSmartSeparate();"; }
            	if ($i == 2) { $buttonCommand = "dpSmartExtractDuplicate(1);"; }
            	if ($i == 3) { $buttonCommand = "dpSmartExtractDuplicate(0);"; }
	            gridLayout -cellWidth 161 -numberOfColumns 2;
	        		iconTextButton -style "iconAndTextHorizontal" -l $buttonLabel[$i] -i $buttonImage[$i] -h 25 -c ( $buttonCommand );
	                gridLayout -cellWidth 32 -numberOfColumns 2;
	                    iconTextButton -style "iconOnly" -image "SafeTitle.png" -ann "Bind a hotkey" -c ( "stHotkey(" + $i + ")" ) ;
	                    iconTextButton -style "iconOnly" -image "factoryIcon.png" -ann "Create a shelf button" -c ( "dpSmartMeshToolButton(" + $i + ")" );
	                setParent..;
	            setParent..;
            }
            gridLayout -cellWidth 193 -numberOfColumns 2;
    			iconTextButton -style "textOnly" -l "Make a shelf button for this window" -c "dpSmartMeshToolButton(4);";
    			gridLayout -cellWidth 32 -numberOfColumns 1;
    				iconTextButton -style "iconOnly" -image "pickOtherComp.png" -ann "About SmartMesh Tools" -c "stAbout;";
    			setParent..;
    		setParent..;
    	setParent..;

    showWindow smartMeshToolsWindow;
}


/////////////////////
//  Smart Combine  //
/////////////////////

global proc dpSmartCombine() {
	global int $st_CustomNames_Combine;
	////  Gather Info
	// A. Check for at least 2 mesh objects
	int $groupMeshes = (size(`listRelatives -type "mesh" (listRelatives("-f", "-type", "transform"))`));
	int $singleMeshes = (size(`listRelatives -f -type "mesh"`));
	if ($groupMeshes + $singleMeshes < 2) { error "Your selection must be, or be parents of, at least two mesh objects."; }

	// B. Get Selection Groups
	string $sel[] = `ls -l -sl`; // long names to avoid duplicate names under different parents
	string $name[] = `ls -sl`; // for renaming groups
	select -hi $sel;
	select -d `ls -s -sl`; // omits shape objects
	string $allObjects[] = `ls -l -sl`; // for instancing purposes
	select $sel;

	// C. Store Raw Groups Long Names
	string $untokenizedGroups[];
	for ($obj in $sel) {
		$untokenizedGroups = stringArrayCatenate($untokenizedGroups, `listRelatives -f -p $obj`);
	}
	string $rawGroupsCount[] = $untokenizedGroups; // Provides a count of all parents of selection (for determining destination)
	$untokenizedGroups = stringArrayRemoveDuplicates($untokenizedGroups);

	// D. Tokenize Raw Groups
	string $buffer[];
	string $destinationGroups[];
	for ($obj in $untokenizedGroups) { // For unique groups
		tokenize $obj "|" $buffer;
		$destinationGroups[`size $destinationGroups`] = $buffer[`size $buffer`-1];
	}

	string $groupsCounter[];
	for ($obj in $rawGroupsCount) {
		tokenize $obj "|" $buffer;
		$groupsCounter[`size $groupsCounter`] = $buffer[`size $buffer`-1];
	}
	
	// E. Determine Mesh Destination
	int $count;
	int $index;
	for ($i=0; $i<`size $destinationGroups`; ++$i) { // For counting group occupancy size
		if (stringArrayCount($destinationGroups[$i], $groupsCounter) > $count) { 
			$count = stringArrayCount($destinationGroups[$i], $groupsCounter);
			$index = $i;
		}
	}

	//  F. Determine name of final combined mesh
	int $sequence;
	string $combinedName;
	while (`objExists ("SmartCombine_" + $sequence)`) { ++$sequence; }

	if ($singleMeshes == 0) { // if only groups were selected for union
		string $uniqueNames[];
		for ($a in $name) { // rule out anything containing "SmartGroup"
			if (`gmatch $a "SmartGroup*"` == 0) {
				$uniqueNames[`size $uniqueNames`] = $a;
			}
		}
		if (`size $uniqueNames` == 1) { $combinedName = $uniqueNames[0]; }
		else if (`size $uniqueNames` > 1) {
			string $prompt = `confirmDialog 
				-title ""
				-message "Pick the most suitable name for your new mesh"
				-button $uniqueNames[0]
				-button $uniqueNames[1]
				-button ("SmartCombine_" + $sequence)`;
			$combinedName = $prompt;
		}
		else { $combinedName = ("SmartCombine_" + $sequence); } // catches any anomalies to make sure operation still executes
	}
	else { $combinedName = ("SmartCombine_" + $sequence); }

	//  G.  Prepare Names (avoids errors caused by duplicate instance names)
	int $prepTicker;
	for ($i=`size $allObjects`-1; $i>-1; --$i) {
		if (objExists ("CombinePrep_" + $prepTicker)) { ++$prepTicker; }
		$allObjects[$i] = `rename $allObjects[$i] ("CombinePrep_" + $prepTicker)`;
	}

	//  H.  Store Instance Meshes
	string $allInstances[];
	for ($a in $allObjects) {
		select $a;
		if (size(`listRelatives -ap (listRelatives("-f", "-s"))`) > 1) { $allInstances[`size $allInstances`] = $a; }
	}

	////  Do The Things
	// 1.  Rename & Convert Instances
	if ($singleMeshes == 0) { ConvertInstanceToObject; } // makes sure group-only selections are not instances
	select $allInstances;
	ConvertInstanceToObject;

	// 2.  Actually Combine
	select $allObjects;
	CombinePolygons;
	DeleteHistory;
	CenterPivot;
	if ($st_CustomNames_Combine == 0) { // This is for if the user does not want the custom naming conventions
		string $newName[] = `ls -sl`;
		$combinedName = $newName[0];
	}
	rename $combinedName;

	// 3.  Cleanup
	for ($a in $allObjects) {
		if (`objExists $a` && $a != $combinedName && $a != ("|" + $combinedName)) { delete $a; }
	}

	// 4.  Return to Group
	if (`objExists $untokenizedGroups[$index]`) {
		parent $combinedName $untokenizedGroups[$index];
	}
}


//////////////////////
//  Smart Separate  //
//////////////////////

global proc dpSmartSeparate() {
	global int $st_CustomNames_Separate;
	//  Currently does not correctly separate objects with children, but it doesn't seem to inadvertently delete anything either.
	string $oldName[];
	string $newName[];
	float $pivot[];
	//// Gather Info
	// A. Make sure ls belongs to exactly 1 mesh
	if (size(`listRelatives -p`) > 1 || size(`ls -sl`)>1) { error ("Separate only one mesh at a time."); }
	if (size(`ls -sl`) == 0) { error ("Nothing selected."); }
	if (size(`listRelatives -type "mesh" -p`) == 0 && size(`listRelatives -type "mesh" -c`) == 0) { error ("Invalid selection.  Select a mesh object to separate."); }

	// B. Get mesh name
	$oldName = `ls -l -sl`;

	// C. Figure out if object has _Sep_ already and remove it
	if (`gmatch $oldName[0] "*_Sep_*"`) {
		string $buffer[];
		tokenize $oldName[0] "_" $buffer;
		for ($slot in $buffer) {
			if ($slot != "Sep") { $newName[0] = ($newName[0] + $slot); }
			else { break; }
		}
	}
	else { $newName[0] = $oldName[0]; }
	$newName[0] = ($newName[0] + "_Sep_1");
	if (`gmatch $newName[0] "*Smart*"`) { $newName[0] = "SmartSeparate_1"; }

	// D. Store pivot location
	$pivot = `xform -q -ws -a -piv`;

	//// Do the things
	// 1.  Convert instance
	if (size(`listRelatives -ap (listRelatives("-f", "-s"))`) > 1) { ConvertInstanceToObject; }

	// 2.  Clear history, Separate delete group
	DeleteHistory;
	SeparatePolygon;
	if (size(`ls -sl`) == 1) { error "Mesh has no elements to separate."; }
	DeleteHistory;
	pickWalkUp;
	Ungroup;

	// 3.  Rename all bits
	if ($st_CustomNames_Separate == 1) { // This is for if the user does not want the custom naming conventions
		for ($chip in `ls -sl`) { rename $chip $newName[0];	}
	}

	// 4.  Reposition pivot
	xform -ws -a -rp $pivot[0] $pivot[1] $pivot[2];
	xform -ws -a -sp $pivot[0] $pivot[1] $pivot[2];
}


//////////////////////
//  Smart Extract   //
//  Smart Duplcate  //
//////////////////////

// Extract and duplicate function similarly, with the only real difference being Extract
// does not leave the selected faces behind on the old object
global proc dpSmartExtractDuplicate(int $option) {
	global int $st_CustomNames_DupeFace;
	global int $st_CustomNames_Extract;
	string $mode[] = { "Duplicate", "Extract" };
	string $match[] = { "*_Dup_*", "*_Ext_*" };
	string $suffix[] = { "_Dup_1", "_Ext_1" };
	string $newName[];
	string $buffer[];
	string $newFaces[];
	// Gather Info
	// A. Make sure ls belongs to exactly 1 mesh
	if (size(`listRelatives -p`) > 1) { error ($mode[$option] + " faces from one mesh at a time."); }
	if (size(`listRelatives -p`) == 0) { error ("Select a component to " + $mode[$option]); }
	if (size(`listRelatives -type "mesh" -p`) == 0) { error ("Invalid selection. Select a mesh component to " + $mode[$option] + "."); }

	// B. Convert to Faces and store selection
	ConvertSelectionToFaces;
	string $oldFaces[] = `ls -l -fl -sl`;

	// C. Store mesh belonging to components
	string $oldName[] = `listRelatives -f -p (listRelatives("-p","-f", $oldFaces[0]))`;

	// D. Check if mesh already contains _Dup_ or _Ext_
	if (`gmatch $oldName[0] $match[$option]`) {
		// E. Tokenize & adjust for final chronological name
		tokenize $oldName[0] "_" $buffer;
		for ($slot in $buffer) {
			if ($slot != "Dup" && $slot != "Ext") { $newName[0] = ($newName[0] + $slot); }
			else { break; }
		}
	}
	else { $newName[0] = $oldName[0]; }
	$newName[0] = ($newName[0] + $suffix[$option]);
	if (`gmatch $newName[0] "*Smart*"` && $option == 0) { $newName[0] = "SmartDuplicate_1"; }
	if (`gmatch $newName[0] "*Smart*"` && $option == 1) { $newName[0] = "SmartExtract_1"; }

	////  Do The Things
	// 1.  Duplicate
	if ($st_CustomNames_DupeFace == 1 && $option == 0) { // Duplicate Face
		$newName = `duplicate -n $newName[0] $oldName[0]`;
	}
	else if ($st_CustomNames_Extract == 1 && $option == 1) { // Extract
		$newName = `duplicate -n $newName[0] $oldName[0]`;
	}
	else if ($option == 1 || $option == 0) {
		$newName = `duplicate $oldName[0]`;
	}

	// 2. Switch over components from old name to new name
	for ($i=0; $i<`size $oldFaces`; ++$i) {
		tokenize $oldFaces[$i] "." $buffer;
		$newFaces[$i] = ($newName[0] + "." + $buffer[1]);
	}

	// 3.  Delete Children
	select `listRelatives -f -c $newName[0]`;
	select -d `ls -type "mesh" -sl`;
	if (size(`ls -sl`) > 0) { delete; }

	// 4.  Delete appropriate faces on new
	select $newName[0];
	ConvertSelectionToFaces;
	select -d $newFaces;
	delete;

	// 5.  If Extract, delete faces on old (wont delete anything if duplicating face)
	if ($option == 1) { delete $oldFaces; }
	select $newName[0];
	selectMode -o;
}


/////////////////////
//  Shelf Buttons  //
/////////////////////

global proc dpSmartMeshToolButton(int $option) {
	global string $gShelfTopLevel;
	global string $stVersion;
	string $currentShelf = `tabLayout -q -st $gShelfTopLevel`;
	
	setParent ($gShelfTopLevel + "|" + $currentShelf);
	
	switch ($option) {

		case 0:	    
	        shelfButton
	            -label "Smart Combine"
	            -annotation "Smart Combine"
	            -image1 "polyUnite.png"
	            -command "source dpSmartMeshTools.mel; dpSmartCombine;";

		break;
		case 1:
	        shelfButton
	            -label "Smart Separate"
	            -annotation "Smart Separate"
	            -image1 "polySeparate.png"
	            -command "source dpSmartMeshTools.mel; dpSmartSeparate;";

		break;
		case 2:
	        shelfButton
	            -label "Smart Extract"
	            -annotation "Smart Extract"
	            -image1 "polyChipOff.png"
	            -command "source dpSmartMeshTools.mel; dpSmartExtractDuplicate(1);";

		break;
		case 3:
	        shelfButton
	            -label "Smart Duplicate Face"
	            -annotation "Smart Duplicate Face"
	            -image1 "polyDuplicateFacet.png"
	            -command "source dpSmartMeshTools.mel; dpSmartExtractDuplicate(0);";

		break;
    	case 4:    
	        shelfButton
	            -label ( "SmartMesh Tools v" + $stVersion )
	            -annotation "Launch SmartMesh Tools Window"
	            -image1 "polyAssignSubdivHole.png"
	            -command "source dpSmartMeshTools.mel; dpSmartMeshTools;";

		break;

		warning "Shelf button created.";
    }

}


///////////////////////
//  Binding Hotkeys  //
///////////////////////

global proc stHotkey(int $option) {
    global string $stVersion;
    string $title[] = { 
    	"Bind Hotkey for Smart Combine", 
    	"Bind Hotkey for Smart Separate", 
    	"Bind Hotkey for Smart Extract",
    	"Bind Hotkey for Smart Duplicate Face" };
    string $descrip[] = {
    	"This hotkey will perform a smarter version of Maya's default operation of \"Mesh > Combine\".",
	    "This hotkey will perform a smarter version of Maya's default operation of \"Mesh > Separate\".",
	    "This hotkey will perform a smarter version of Maya's default operation of \"Mesh > Extract\".",
		"This hotkey will perform a smarter version of Maya's default operation of \"Edit Mesh > Duplicate Face\"." };
	string $recommend[] = {
		"(Recommended Ctrl + Alt + Shift + C)",
		"(Recommended Ctrl + Alt + Shift + S)",
		"(Recommended Ctrl + Alt + Shift + E)",
		"(Recommended Ctrl + Alt + Shift + D)" };
    string $key[] = { 
    	"C",
        "S", 
        "E", 
        "D" };

    if (`window -exists stBindHotkey`) {
        deleteUI stBindHotkey;
        windowPref -remove stBindHotkey;
    }

    window -mxb 0 -mnb 0 -tlb 1 -title $title[$option] -w 200 stBindHotkey;
        gridLayout -numberOfColumns 1 -cellWidthHeight 300 185;
            gridLayout -numberOfColumns 1 -cellWidthHeight 300 135;
                scrollField -wordWrap true -editable false
                -text ("Choose a desired hotkey.  The hotkey is case sensitive!\n\n" + $descrip[$option] + "\n\n" + $recommend[$option]);
                gridLayout -numberOfColumns 3 -cellWidthHeight 100 50;
                    gridLayout -numberOfColumns 1 -cellWidthHeight 75 50;
                        textFieldGrp -text $key[$option] hotkeyField;
                    setParent..;
                    gridLayout -numberOfColumns 2 -cellWidthHeight 50 50;
                        checkBox -label "Alt" -v 1 altCheck;
                        checkBox -label "Ctrl" -v 1 ctrlCheck;
                    setParent..;
                    gridLayout -numberOfColumns 1 -cellWidthHeight 100 50;
                        if ( $option == 0 ) { button -label "ASSIGN" -command "stMenuHotkey(0)"; }
                        else if ( $option == 1) { button -label "ASSIGN" -command "stMenuHotkey(1)"; }
                        else if ( $option == 2) { button -label "ASSIGN" -command "stMenuHotkey(2)"; }
                        else if ( $option == 3) { button -label "ASSIGN" -command "stMenuHotkey(3)"; }
                    setParent..;
                setParent..;
            setParent..;
        setParent..;
        
	showWindow stBindHotkey;
    setFocus hotkeyField;
}

global proc stMenuHotkey(int $option) {
    int $keyLength;
    string $namedCmd;
    string $hotkeyAnn[] = { "Smart Combine", "Smart Separate", "Smart Extract", "Smart Duplicate Face" };

    $key = `textFieldGrp -q -text hotkeyField`;
    $keyLength = `size $key`;
    $alt = `checkBox -q -v "altCheck"`;
    $ctrl = `checkBox -q -v "ctrlCheck"`;

    if ( $keyLength > 1 ) { error "Hotkey must be a single character."; }
    if ( $key == " " ) { error "Hotkey may not be bound to the space bar."; }
    if ( $key == "" ) { error "Hotkey must be a single character."; }
    
    string $rebindConfirm = `confirmDialog
        -title "Confirm hotkey bind"
        -message "Are you sure you want to bind this hotkey?  This is NOT undoable and will remain bound until you change the binding in the Hotkey Editor."
        -button "Bind It"
        -button "Cancel"
        -defaultButton "Cancel"
        -cancelButton "Cancel"
        -dismissString "Cancel"`;
        
    if ( $rebindConfirm == "Bind It" ) {
        if ( $option == 0 ) {
            nameCommand -annotation $hotkeyAnn[$option] -command "source dpSmartMeshTools; dpSmartCombine;" dpSmartCombineNamedCommand;
            $namedCmd = "dpSmartCombineNamedCommand";
        }
        else if ( $option == 1 ) {
            nameCommand -annotation $hotkeyAnn[$option] -command "source dpSmartMeshTools; dpSmartSeparate;" dpSmartSeparateNamedCommand;
            $namedCmd = "dpSmartSeparateNamedCommand";
        }
        else if ( $option == 2 ) {
            nameCommand -annotation $hotkeyAnn[$option] -command "source dpSmartMeshTools; dpSmartExtractDuplicate(1);" dpSmartExtractNamedCommand;
            $namedCmd = "dpSmartExtractNamedCommand";
        }
        else if ( $option == 3 ) {
            nameCommand -annotation $hotkeyAnn[$option] -command "source dpSmartMeshTools; dpSmartExtractDuplicate(0);" dpSmartDupeFaceNamedCommand;
            $namedCmd = "dpSmartDupeFaceNamedCommand";
        }


        if ( $alt == "0" && $ctrl == "0" ) {
            hotkey -k $key -name $namedCmd;
            warning ( "Hotkey assigned to the " + $key + " key." );
        }
        else if ( $alt == "1" && $ctrl == "0" ) {
            hotkey -k $key -alt -name $namedCmd;
            warning ( "Hotkey assigned to Alt + " + $key + "\"." );
        }
        else if ( $alt == "0" && $ctrl == "1" ) {
            hotkey -k $key -ctl -name $namedCmd;
            warning ( "Hotkey assigned to Ctrl + " + $key + "\"." );
        }
        else if ( $alt == "1" && $ctrl == "1" ) {
            hotkey -k $key -alt -ctl -name $namedCmd;
            warning ( "Hotkey assigned to Alt + Ctrl + " + $key + "\"." );
        }    
    }
    deleteUI stBindHotkey;
    windowPref -remove stBindHotkey;
}

////////////////////
//  About Button  //
////////////////////

global proc stAbout() {
	global string $stVersion;
	global string $stRelease;
	
    if (`window -exists stAboutWindow`) {
        deleteUI stAboutWindow;
        windowPref -remove stAboutWindow;
    }

    window -mxb 0 -mnb 0 -tlb 1 -title "About SmartMesh Tools" -w 400 stAboutWindow;
        gridLayout -numberOfColumns 1 -cellWidthHeight 400 175;
            gridLayout -numberOfColumns 1 -cellWidthHeight 400 150;
                scrollField -wordWrap true -editable false
                	-text ( "SmartMesh Tools v" + $stVersion + " released " + $stRelease + " for Maya 2012 thru 2015.\n\nContact Dennis.Porter.3D@gmail.com with any bugs, comments, or questions.\n\nRefer to commented lines at the top of the .mel file for script information and modification instructions." );
                gridLayout -numberOfColumns 3 -cellWidthHeight 200 25;
                	iconTextButton -style "textOnly" -l "SmartMesh Tools on CreativeCrash" -c "system(\"shell start http://www.creativecrash.com/maya/script/smartmesh-tools\");";
                	iconTextButton -style "textOnly" -l "Author Website" -bgc .2 .2 .2 -c "system(\"shell start http://dennisporter3d.com/mel.htm\");";
                setParent..;
            setParent..;
		setParent..;

    showWindow stAboutWindow;
}